"""
Django settings for website_config project.

Generated by 'django-admin startproject' using Django 4.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

import os
import secrets
from pathlib import Path
import sys

import dj_database_url

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/


# The `DYNO` env var is set on Heroku CI, but it's not a real Heroku app, so we have to
# also explicitly exclude CI:
# https://devcenter.heroku.com/articles/heroku-ci#immutable-environment-variables
IS_HEROKU_APP = "DYNO" in os.environ and not "CI" in os.environ

if IS_HEROKU_APP:
    SECURE_SSL_REDIRECT = True  # redirect all http requests to https
else:
    SECURE_SSL_REDIRECT = False  # for development purposes only
    # as django local server does not support https out of the box.
    # Any production deployment should have SSL enabled.


# SECURITY WARNING: keep the secret key used in production secret!
if IS_HEROKU_APP:
    SECRET_KEY = os.environ.get(
        "DJANGO_SECRET_KEY",
        default=secrets.token_urlsafe(nbytes=64),
        # if no secret key is available in enironment variables, generate a new one
        # note: this is not a good practice, as the secret key will change with every
        # server restart. If server restarts, all session data
        # will stop being attached to correct secrets.
        # among other things CSFR tokens will be treated as invalid by the server with new SECRET_KEY.
    )
else:
    try:
        import dev_secret_key

        SECRET_KEY = dev_secret_key.SECRET_KEY
    except ImportError:
        print("No dev_secret_key.py file found. Generating a new secret key.")
        SECRET_KEY = secrets.token_urlsafe(nbytes=64)

# SECURITY WARNING: don't run with debug turned on in production!
if IS_HEROKU_APP:
    DEBUG = False
else:
    DEBUG = True

# Enable HSTS
SECURE_HSTS_SECONDS = 31536000  # 1 year
SECURE_HSTS_INCLUDE_SUBDOMAINS = True
SECURE_HSTS_PRELOAD = True

# Other security settings
SECURE_BROWSER_XSS_FILTER = True
X_FRAME_OPTIONS = "DENY"
SECURE_CONTENT_TYPE_NOSNIFF = True

# Secure cookies
SESSION_COOKIE_SECURE = True
CSRF_COOKIE_SECURE = True

# Enable browser XSS filtering
ALLOWED_HOSTS = []
if IS_HEROKU_APP:
    ALLOWED_HOSTS = [
        "danieb-website-eu-0be2b9c8638a.herokuapp.com",
        "www.borowiecki.info",
        "borowiecki.info",
    ]
if DEBUG and not IS_HEROKU_APP:
    ALLOWED_HOSTS = [
        "127.0.0.1",
        "localhost",
    ]

# Application definition
INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    # 'django.contrib.sites', # sites framework was attempted to be used for redirection
    # from daniel.borowiecki.info to borowiecki.info
    # but I did not manage to make it work. Instead I used a redirect in the DNS settings.
    # my custom app
    "website",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",  # static file serving middleware
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    # custom middleware
    "website.middleware.GlobalContextMiddleware",
]

ROOT_URLCONF = "website_config.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "website_config.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }

if IS_HEROKU_APP:
    # In production on Heroku the database configuration is derived from the `DATABASE_URL`
    # environment variable by the dj-database-url package. `DATABASE_URL` will be set
    # automatically by Heroku when a database addon is attached to your Heroku app. See:
    # https://devcenter.heroku.com/articles/provisioning-heroku-postgres
    # https://github.com/jazzband/dj-database-url
    DATABASES = {
        "default": dj_database_url.config(
            conn_max_age=600,
            conn_health_checks=True,
            ssl_require=True,
        ),
    }
elif "test" in sys.argv:

    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.postgresql",
            "NAME": "django_test_db",
            "USER": "django",
            "PASSWORD": "PISSWORT",
            "HOST": "localhost",
            "PORT": "",
        },
    }

else:
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.postgresql",
            "NAME": "myproject",
            "USER": "myprojectuser",
            "PASSWORD": "password",
            "HOST": "localhost",
            "PORT": "",
        },
    }


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

# STATIC_URL = 'static'
# STATIFILES_DIRS = [BASE_DIR / "static/images"]

# IMG_ROOT = BASE_DIR / STATIC_ROOT / "images"

STATIC_ROOT = BASE_DIR / "staticfiles"
STATIC_URL = "static/"
STATICFILES_DIRS = [  # BASE_DIR / "website/static",
    BASE_DIR / "website/static/images",
    BASE_DIR / "website/static/css",
    BASE_DIR / "website/static/js",
    BASE_DIR / "website/static/md",
]
# Media settings
# MEDIA_URL = "/media/"
# MEDIA_ROOT = os.path.join(BASE_DIR, "media")

MEDIA_ROOT = os.path.join("storage.bunnycdn.com", "minimum-europe", "personal-site")

CUSTOM_REMOTE_STORAGE_OPTIONS = {
    "API_KEY_ENV_NAME": "BUNNY_CDN_API_KEY",
    "STORAGE_ZONE": "minimum-europe",
    "STORAGE_ZONE_REGION": "de",
    "FOLDER": "personal-site",
}


# in the future possibly enable compression of static file as Heroku Example recommends.
# will have to understand serving static files better first.
# STORAGES = {
#     # Enable WhiteNoise's GZip and Brotli compression of static assets:
#     # https://whitenoise.readthedocs.io/en/latest/django.html#add-compression-and-caching-support
#     "staticfiles": {
#         "BACKEND": "whitenoise.storage.CompressedManifestStaticFilesStorage",
#     },
# }

# Don't store the original (un-hashed filename) version of static files, to reduce slug size:
# https://whitenoise.readthedocs.io/en/latest/django.html#WHITENOISE_KEEP_ONLY_HASHED_FILES
# WHITENOISE_KEEP_ONLY_HASHED_FILES = True


# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
